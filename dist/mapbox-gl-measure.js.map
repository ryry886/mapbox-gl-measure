{"version":3,"file":"mapbox-gl-measure.js","sources":["../node_modules/@turf/helpers/dist/es/index.js","../node_modules/@turf/invariant/dist/es/index.js","../node_modules/@turf/distance/dist/es/index.js","../node_modules/@turf/meta/dist/es/index.js","../node_modules/@turf/length/dist/es/index.js","../node_modules/@turf/area/dist/es/index.js","../node_modules/@turf/centroid/dist/es/index.js","../node_modules/@turf/line-segment/dist/es/index.js","../index.js"],"sourcesContent":["/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians, } from \"@turf/helpers\";\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n/**\n * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord | Point} from origin point or coordinate\n * @param {Coord | Point} to destination point or coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var coordinates1 = getCoord(from);\n    var coordinates2 = getCoord(to);\n    var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n    var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n    var lat1 = degreesToRadians(coordinates1[1]);\n    var lat2 = degreesToRadians(coordinates2[1]);\n    var a = Math.pow(Math.sin(dLat / 2), 2) +\n        Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n    return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nexport default distance;\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import distance from \"@turf/distance\";\nimport { segmentReduce } from \"@turf/meta\";\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nexport default function length(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Calculate distance from 2-vertex line segments\n    return segmentReduce(geojson, function (previousValue, segment) {\n        var coords = segment.geometry.coordinates;\n        return previousValue + distance(coords[0], coords[1], options);\n    }, 0);\n}\n","import { geomReduce } from \"@turf/meta\";\n// Note: change RADIUS => earthRadius\nvar RADIUS = 6378137;\n/**\n * Takes one or more features and returns their area in square meters.\n *\n * @name area\n * @param {GeoJSON} geojson input GeoJSON feature(s)\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nexport default function area(geojson) {\n    return geomReduce(geojson, function (value, geom) {\n        return value + calculateArea(geom);\n    }, 0);\n}\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom) {\n    var total = 0;\n    var i;\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonArea(geom.coordinates);\n        case \"MultiPolygon\":\n            for (i = 0; i < geom.coordinates.length; i++) {\n                total += polygonArea(geom.coordinates[i]);\n            }\n            return total;\n        case \"Point\":\n        case \"MultiPoint\":\n        case \"LineString\":\n        case \"MultiLineString\":\n            return 0;\n    }\n    return 0;\n}\nfunction polygonArea(coords) {\n    var total = 0;\n    if (coords && coords.length > 0) {\n        total += Math.abs(ringArea(coords[0]));\n        for (var i = 1; i < coords.length; i++) {\n            total -= Math.abs(ringArea(coords[i]));\n        }\n    }\n    return total;\n}\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords) {\n    var p1;\n    var p2;\n    var p3;\n    var lowerIndex;\n    var middleIndex;\n    var upperIndex;\n    var i;\n    var total = 0;\n    var coordsLength = coords.length;\n    if (coordsLength > 2) {\n        for (i = 0; i < coordsLength; i++) {\n            if (i === coordsLength - 2) {\n                // i = N-2\n                lowerIndex = coordsLength - 2;\n                middleIndex = coordsLength - 1;\n                upperIndex = 0;\n            }\n            else if (i === coordsLength - 1) {\n                // i = N-1\n                lowerIndex = coordsLength - 1;\n                middleIndex = 0;\n                upperIndex = 1;\n            }\n            else {\n                // i = 0 to N-3\n                lowerIndex = i;\n                middleIndex = i + 1;\n                upperIndex = i + 2;\n            }\n            p1 = coords[lowerIndex];\n            p2 = coords[middleIndex];\n            p3 = coords[upperIndex];\n            total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n        }\n        total = (total * RADIUS * RADIUS) / 2;\n    }\n    return total;\n}\nfunction rad(num) {\n    return (num * Math.PI) / 180;\n}\n","import { coordEach } from \"@turf/meta\";\nimport { point } from \"@turf/helpers\";\n/**\n * Takes one or more features and calculates the centroid using the mean of all vertices.\n * This lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.\n *\n * @name centroid\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties\n * @returns {Feature<Point>} the centroid of the input features\n * @example\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n *\n * var centroid = turf.centroid(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, centroid]\n */\nfunction centroid(geojson, options) {\n    if (options === void 0) { options = {}; }\n    var xSum = 0;\n    var ySum = 0;\n    var len = 0;\n    coordEach(geojson, function (coord) {\n        xSum += coord[0];\n        ySum += coord[1];\n        len++;\n    }, true);\n    return point([xSum / len, ySum / len], options.properties);\n}\nexport default centroid;\n","import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n","import MapboxDraw from \"@mapbox/mapbox-gl-draw\";\r\nimport length from '@turf/length';\r\nimport area  from '@turf/area';\r\nimport centroid from '@turf/centroid';\r\nimport * as helpers from '@turf/helpers';\r\nimport lineSegment from \"@turf/line-segment\";\r\n\r\nconst MEASURE_LABELS_SOURCE_ID = 'source-measure-labels';\r\nconst MEASURE_LABELS_LAYER_ID = 'layer-measure-labels';\r\nconst MEASURE_POINTS_LAYER_ID = 'layer-measure-points';\r\nconst MEASURE_POINTS_HALO_LAYER_ID = 'layer-measure-points-halo';\r\n\r\nconst SOURCE_DATA = {\r\n  type: \"FeatureCollection\",\r\n  features: []\r\n};\r\nexport default class MeasuresControl {\r\n\r\n  constructor(options) {\r\n    this.options = options;\r\n    this._drawCtrl = new MapboxDraw({\r\n      displayControlsDefault: false,\r\n      styles: [\r\n        // ACTIVE (being drawn)\r\n        // line stroke\r\n        {\r\n          \"id\": \"gl-draw-line\",\r\n          \"type\": \"line\",\r\n          \"filter\": [\"all\", [\"==\", \"$type\", \"LineString\"],\r\n            [\"!=\", \"mode\", \"static\"]\r\n          ],\r\n          \"layout\": {\r\n            \"line-cap\": \"round\",\r\n            \"line-join\": \"round\"\r\n          },\r\n          \"paint\": {\r\n            \"line-color\": this.options?.style?.lengthStyle?.lineColor ?? \"#D20C0C\",\r\n            \"line-dasharray\": [0.2, 2],\r\n            \"line-width\": this.options?.style?.lengthStyle?.lineWidth ?? 2\r\n          }\r\n        },\r\n        // polygon fill\r\n        {\r\n          \"id\": \"gl-draw-polygon-fill\",\r\n          \"type\": \"fill\",\r\n          \"filter\": [\"all\", [\"==\", \"$type\", \"Polygon\"],\r\n            [\"!=\", \"mode\", \"static\"]\r\n          ],\r\n          \"paint\": {\r\n            \"fill-color\": this.options?.style?.areaStyle?.fillColor ?? \"#D20C0C\",\r\n            \"fill-outline-color\": this.options?.style?.areaStyle?.fillOutlineColor ?? \"#D20C0C\",\r\n            \"fill-opacity\": this.options?.style?.areaStyle?.fillOpacity ?? 0.1,\r\n          }\r\n        },\r\n        // polygon mid points\r\n        {\r\n          'id': 'gl-draw-polygon-midpoint',\r\n          'type': 'circle',\r\n          'filter': ['all',\r\n            ['==', '$type', 'Point'],\r\n            ['==', 'meta', 'midpoint']\r\n          ],\r\n          'paint': {\r\n            'circle-radius': this.options?.style?.pointStyle?.midPointRadius ?? 6,\r\n            'circle-color': this.options?.style?.pointStyle?.midPointColor ?? \"#fbb03b\",\r\n          }\r\n        },\r\n        // polygon outline stroke\r\n        // This doesn't style the first edge of the polygon, which uses the line stroke styling instead\r\n        {\r\n          \"id\": \"gl-draw-polygon-stroke-active\",\r\n          \"type\": \"line\",\r\n          \"filter\": [\"all\", [\"==\", \"$type\", \"Polygon\"],\r\n            [\"!=\", \"mode\", \"static\"]\r\n          ],\r\n          \"layout\": {\r\n            \"line-cap\": \"round\",\r\n            \"line-join\": \"round\"\r\n          },\r\n          \"paint\": {\r\n            \"line-color\": this.options?.style?.areaStyle?.fillOutlineColor ?? \"#D20C0C\",\r\n            \"line-dasharray\": [0.2, 2],\r\n            \"line-width\": this.options?.style?.areaStyle?.lineWidth ?? 2\r\n          }\r\n        },\r\n        // vertex point halos\r\n        {\r\n          \"id\": \"gl-draw-polygon-and-line-vertex-halo-active\",\r\n          \"type\": \"circle\",\r\n          \"filter\": [\"all\", [\"==\", \"meta\", \"vertex\"],\r\n            [\"==\", \"$type\", \"Point\"],\r\n            [\"!=\", \"mode\", \"static\"]\r\n          ],\r\n          \"paint\": {\r\n            \"circle-radius\": this.options?.style?.pointStyle?.midPointHaloRadius ?? 8,\r\n            \"circle-color\": this.options?.style?.pointStyle?.midPointHaloColor ?? '#FFF',\r\n          }\r\n        },\r\n        // vertex points\r\n        {\r\n          \"id\": \"gl-draw-polygon-and-line-vertex-active\",\r\n          \"type\": \"circle\",\r\n          \"filter\": [\"all\", [\"==\", \"meta\", \"vertex\"],\r\n            [\"==\", \"$type\", \"Point\"],\r\n            [\"!=\", \"mode\", \"static\"]\r\n          ],\r\n          \"paint\": {\r\n            \"circle-radius\": this.options?.style?.pointStyle?.midPointRadius ?? 6,\r\n            \"circle-color\": this.options?.style?.pointStyle?.midPointColor ?? \"#fbb03b\",\r\n          }\r\n        },\r\n\r\n        // INACTIVE (static, already drawn)\r\n        // line stroke\r\n        {\r\n          \"id\": \"gl-draw-line-static\",\r\n          \"type\": \"line\",\r\n          \"filter\": [\"all\", [\"==\", \"$type\", \"LineString\"],\r\n            [\"==\", \"mode\", \"static\"]\r\n          ],\r\n          \"layout\": {\r\n            \"line-cap\": \"round\",\r\n            \"line-join\": \"round\"\r\n          },\r\n          \"paint\": {\r\n            \"line-color\": this.options?.style?.lengthStyle?.lineColor ?? \"#D20C0C\",\r\n            \"line-width\": this.options?.style?.lengthStyle?.lineWidth ?? 2\r\n          }\r\n        },\r\n        // polygon fill\r\n        {\r\n          \"id\": \"gl-draw-polygon-fill-static\",\r\n          \"type\": \"fill\",\r\n          \"filter\": [\"all\", [\"==\", \"$type\", \"Polygon\"],\r\n            [\"==\", \"mode\", \"static\"]\r\n          ],\r\n          \"paint\": {\r\n            \"fill-color\": this.options?.style?.areaStyle?.fillColor ?? \"#000\",\r\n            \"fill-outline-color\": this.options?.style?.areaStyle?.fillOutlineColor ?? \"#000\",\r\n            \"fill-opacity\": this.options?.style?.areaStyle?.fillOpacity ?? 0.1,\r\n          }\r\n        },\r\n        // polygon outline\r\n        {\r\n          \"id\": \"gl-draw-polygon-stroke-static\",\r\n          \"type\": \"line\",\r\n          \"filter\": [\"all\", [\"==\", \"$type\", \"Polygon\"],\r\n            [\"==\", \"mode\", \"static\"]\r\n          ],\r\n          \"layout\": {\r\n            \"line-cap\": \"round\",\r\n            \"line-join\": \"round\"\r\n          },\r\n          \"paint\": {\r\n            \"line-color\": this.options?.style?.areaStyle?.fillOutlineColor ?? \"#000\",\r\n            \"line-width\": this.options?.style?.areaStyle?.lineWidth ?? 2\r\n          }\r\n        }\r\n      ]\r\n    });\r\n  }\r\n  test(){\r\n    setInterval(()=>{\r\n      console.log(123);\r\n    },500)\r\n  }\r\n  start(mode){\r\n    switch(mode){\r\n      case \"distance\":\r\n        this._drawCtrl.changeMode(\"draw_line_string\")\r\n\r\n        break;\r\n      case \"area\":\r\n        this._drawCtrl.changeMode(\"draw_polygon\")\r\n        break;\r\n    }\r\n    this._registerEvents();\r\n  }\r\n  clear(){\r\n    this._drawCtrl.deleteAll();\r\n    this._updateLabels();\r\n  }\r\n  stop(){\r\n    this._drawCtrl.changeMode(\"simple_select\");\r\n    this._removeEvents();\r\n  }\r\n  addTo(map) {\r\n    this._map = map;\r\n    this._map.addControl(this._drawCtrl);\r\n    this._addSymbolLayer();\r\n    this._registerEvents();\r\n    return this;\r\n  }\r\n\r\n  _formatMeasure(dist, isareaStyle = false) {\r\n    return isareaStyle ? this._formatAreaToMetricSystem(dist) : this._formatToMetricSystem(dist);\r\n  }\r\n\r\n  // area in sqm \r\n  _formatAreaToMetricSystem (dist) {\r\n    let measure,unit;\r\n    if(dist <10000){\r\n      measure = dist;\r\n      unit = this.options?.language==\"cn\"?\"平方米\":'m²'\r\n    }else if(dist >=10000 && dist <1000000){\r\n      measure = dist/10000;\r\n      unit = this.options?.language==\"cn\"?\"公顷\":'hm²'\r\n    }\r\n    else{\r\n      measure = helpers.convertArea(dist,\"meters\",\"kilometers\")\r\n      unit = this.options?.language==\"cn\"?\"平方千米\":'km²'\r\n    } \r\n    return `${measure.toFixed(2)} ${unit}`\r\n  }\r\n\r\n\r\n  _formatToMetricSystem (dist) {\r\n    let measure,unit;\r\n    if(dist>1000){\r\n      measure = helpers.convertLength(dist,\"meters\",\"kilometers\")\r\n      unit = this.options?.language==\"cn\"?\"公里\":'km'\r\n    }else{\r\n      measure = dist;\r\n      unit = this.options?.language==\"cn\"?\"米\":'m'\r\n    }\r\n    return `${measure.toFixed(2)} ${unit}`\r\n  }\r\n  _addSymbolLayer(){\r\n    this._map.addSource(MEASURE_LABELS_SOURCE_ID, {\r\n      type: 'geojson',\r\n      data: SOURCE_DATA\r\n    });\r\n    this._map.addLayer({\r\n      'id': MEASURE_LABELS_LAYER_ID,\r\n      'type': 'symbol',\r\n      'source': MEASURE_LABELS_SOURCE_ID,\r\n      'layout': {\r\n        // 'text-font': [\r\n        //   'Klokantech Noto Sans Bold'\r\n        // ],\r\n        'text-field': ['get', 'measurement'],\r\n        'text-variable-anchor': ['top', 'bottom', 'left', 'right','center'],\r\n        'text-radial-offset': this.options?.style?.textStyle?.radialOffset?? 0.5,\r\n        'text-justify': 'auto',\r\n        'text-size': this.options?.style?.textStyle?.textSize?? 14,\r\n        'text-letter-spacing': this.options?.style?.textStyle?.letterSpacing?? 0.05,\r\n      },\r\n      'paint': {\r\n        'text-color': this.options?.style?.textStyle?.textColor?? '#D20C0C',\r\n        'text-halo-color': this.options?.style?.textStyle?.textHaloColor?? '#fff',\r\n        'text-halo-width': this.options?.style?.textStyle?.textHaloWidth?? 2,\r\n      },\r\n    });\r\n    this._map.addLayer({\r\n      'id': MEASURE_POINTS_HALO_LAYER_ID,\r\n      'type': 'circle',\r\n      'source': MEASURE_LABELS_SOURCE_ID,\r\n      'filter':  ['==', ['get','visible'], true],\r\n      'layout': {\r\n\r\n      },\r\n      'paint': {\r\n        \"circle-radius\": this.options?.style?.pointStyle?.vertexHaloRadius ?? 4,\r\n        \"circle-color\": this.options?.style?.pointStyle?.vertexHaloColor ?? \"#fff\",\r\n      },\r\n    });\r\n    this._map.addLayer({\r\n      'id': MEASURE_POINTS_LAYER_ID,\r\n      'type': 'circle',\r\n      'source': MEASURE_LABELS_SOURCE_ID,\r\n      'filter':  ['==', ['get','visible'], true],\r\n      'layout': {\r\n        // 'text-font': [\r\n        //   'Klokantech Noto Sans Bold'\r\n        // ],\r\n      },\r\n      'paint': {\r\n        \"circle-radius\": this.options?.style?.pointStyle?.vertexRadius ?? 2,\r\n        \"circle-color\": this.options?.style?.pointStyle?.vertexColor ?? \"#D20C0C\",\r\n      },\r\n    });\r\n  }\r\n  _registerEvents() {\r\n    if(!this._measureListener)\r\n    {\r\n      this._measureListener =this._updateLabels.bind(this)\r\n      this._map.on('draw.create', this._measureListener);\r\n      this._map.on('draw.update', this._measureListener);\r\n      this._map.on('draw.delete', this._measureListener);\r\n      this._map.on('draw.render', this._measureListener);\r\n    }\r\n  }\r\n  _removeEvents(){\r\n    if(this._measureListener){\r\n      this._map.off('draw.create', this._measureListener);\r\n      this._map.off('draw.update', this._measureListener);\r\n      this._map.on('draw.delete', this._measureListener);\r\n      this._map.off('draw.render', this._measureListener);\r\n      this._measureListener = null;\r\n    }\r\n\r\n  }\r\n  _updateLabels() {\r\n    let source = this._map.getSource(MEASURE_LABELS_SOURCE_ID);\r\n    // Build up the centroids for each segment into a features list, containing a property \r\n    // to hold up the measurements\r\n    let features = [];\r\n    // Generate features from what we have on the drawControl:\r\n    let drawnFeatures = this._drawCtrl.getAll();\r\n    drawnFeatures.features.forEach((feature) => {\r\n      try {\r\n        if (feature.geometry.type == 'Polygon') {\r\n          let myarea = this._formatMeasure(area(feature), true);\r\n          let mycentroid = centroid(feature);\r\n          let measurement = `${myarea}`;\r\n          mycentroid.properties = {\r\n            measurement,\r\n          };\r\n          features.push(mycentroid);\r\n        } else if (feature.geometry.type == 'LineString') {\r\n          let segments = lineSegment(feature);\r\n          let lineLength=0\r\n          segments.features.forEach((segment,index) => {\r\n            if(index==0){\r\n              let mycentroid = {\r\n                geometry:{\r\n                  type:\"Point\",\r\n                  coordinates:segment.geometry.coordinates[0]\r\n                },\r\n                properties:{\r\n                  measurement: this.options?.language==\"cn\"?\"起点\":\"start\",\r\n                  visible:true,\r\n                }\r\n              };\r\n              features.push(mycentroid);\r\n            }\r\n            lineLength += length(segment);\r\n            let measurement = this._formatMeasure(( lineLength* 1000)); //km to m\r\n            let mycentroid = {\r\n              geometry:{\r\n                type:\"Point\",\r\n                coordinates:segment.geometry.coordinates[1]\r\n              },\r\n              properties:{\r\n                measurement:measurement,\r\n                visible:true\r\n              }\r\n            };\r\n            features.push(mycentroid);\r\n          });\r\n        }\r\n      } catch(e) {\r\n         //Silently ignored\r\n      }\r\n      \r\n    });\r\n    let data = {\r\n      type: \"FeatureCollection\",\r\n      features: features\r\n    };\r\n    source.setData(data);\r\n  }\r\n}"],"names":["earthRadius","factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","areaFactors","acres","hectares","feature","geom","properties","options","feat","type","id","bbox","geometry","point","coordinates","Error","Array","isArray","length","isNumber","lineString","featureCollection","features","fc","radiansToLength","units","factor","lengthToRadians","distance","degreesToRadians","Math","PI","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","num","isNaN","getCoord","coord","getCoords","coords","from","to","coordinates1","coordinates2","dLat","dLon","lat1","lat2","a","pow","sin","cos","atan2","sqrt","coordEach","geojson","callback","excludeWrapCoord","j","k","l","stopG","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureIndex","geometries","geomIndex","multiFeatureIndex","geometryIndex","geomType","geomEach","i","g","featureProperties","featureBBox","featureId","undefined","geomReduce","initialValue","previousValue","currentGeometry","flattenEach","coordinate","segmentEach","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","currentCoord","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","segment","RADIUS","value","calculateArea","total","polygonArea","abs","ringArea","p1","p2","p3","lowerIndex","middleIndex","upperIndex","coordsLength","rad","centroid","xSum","ySum","len","lineSegment","results","lineSegmentFeature","forEach","segments","createSegments","push","reduce","currentCoords","coords1","coords2","x1","y1","x2","y2","west","south","east","north","MEASURE_LABELS_SOURCE_ID","MEASURE_LABELS_LAYER_ID","MEASURE_POINTS_LAYER_ID","MEASURE_POINTS_HALO_LAYER_ID","SOURCE_DATA","MeasuresControl","_this$options$style$l","_this$options","_this$options$style","_this$options$style$l2","_this$options$style$l3","_this$options2","_this$options2$style","_this$options2$style$","_this$options$style$a","_this$options3","_this$options3$style","_this$options3$style$","_this$options$style$a2","_this$options4","_this$options4$style","_this$options4$style$","_this$options$style$a3","_this$options5","_this$options5$style","_this$options5$style$","_this$options$style$p","_this$options6","_this$options6$style","_this$options6$style$","_this$options$style$p2","_this$options7","_this$options7$style","_this$options7$style$","_this$options$style$a4","_this$options8","_this$options8$style","_this$options8$style$","_this$options$style$a5","_this$options9","_this$options9$style","_this$options9$style$","_this$options$style$p3","_this$options10","_this$options10$style","_this$options10$style2","_this$options$style$p4","_this$options11","_this$options11$style","_this$options11$style2","_this$options$style$p5","_this$options12","_this$options12$style","_this$options12$style2","_this$options$style$p6","_this$options13","_this$options13$style","_this$options13$style2","_this$options$style$l4","_this$options14","_this$options14$style","_this$options14$style2","_this$options$style$l5","_this$options15","_this$options15$style","_this$options15$style2","_this$options$style$a6","_this$options16","_this$options16$style","_this$options16$style2","_this$options$style$a7","_this$options17","_this$options17$style","_this$options17$style2","_this$options$style$a8","_this$options18","_this$options18$style","_this$options18$style2","_this$options$style$a9","_this$options19","_this$options19$style","_this$options19$style2","_this$options$style$a10","_this$options20","_this$options20$style","_this$options20$style2","_classCallCheck","_drawCtrl","MapboxDraw","displayControlsDefault","styles","style","lengthStyle","lineColor","lineWidth","areaStyle","fillColor","fillOutlineColor","fillOpacity","pointStyle","midPointRadius","midPointColor","midPointHaloRadius","midPointHaloColor","_createClass","key","test","setInterval","console","log","start","mode","changeMode","_registerEvents","clear","deleteAll","_updateLabels","_removeEvents","addTo","map","_map","addControl","_addSymbolLayer","_formatMeasure","dist","isareaStyle","arguments","_formatAreaToMetricSystem","_formatToMetricSystem","measure","unit","_this$options21","language","_this$options22","_this$options23","helpers","concat","toFixed","_this$options24","_this$options25","_this$options$style$t","_this$options26","_this$options26$style","_this$options26$style2","_this$options$style$t2","_this$options27","_this$options27$style","_this$options27$style2","_this$options$style$t3","_this$options28","_this$options28$style","_this$options28$style2","_this$options$style$t4","_this$options29","_this$options29$style","_this$options29$style2","_this$options$style$t5","_this$options30","_this$options30$style","_this$options30$style2","_this$options$style$t6","_this$options31","_this$options31$style","_this$options31$style2","_this$options$style$p7","_this$options32","_this$options32$style","_this$options32$style2","_this$options$style$p8","_this$options33","_this$options33$style","_this$options33$style2","_this$options$style$p9","_this$options34","_this$options34$style","_this$options34$style2","_this$options$style$p10","_this$options35","_this$options35$style","_this$options35$style2","addSource","data","addLayer","textStyle","radialOffset","textSize","letterSpacing","textColor","textHaloColor","textHaloWidth","vertexHaloRadius","vertexHaloColor","vertexRadius","vertexColor","_measureListener","bind","on","off","_this","source","getSource","drawnFeatures","getAll","myarea","mycentroid","measurement","lineLength","index","_this$options36","visible","e","setData"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}